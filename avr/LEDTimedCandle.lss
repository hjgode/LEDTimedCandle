
LEDTimedCandle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  00000374  2**0
                  ALLOC
  3 .stab         00001050  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea2  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	3d c0       	rjmp	.+122    	; 0x8c <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee ed       	ldi	r30, 0xDE	; 222
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 37       	cpi	r26, 0x70	; 112
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	48 d1       	rcall	.+656    	; 0x2d4 <main>
  44:	4a c1       	rjmp	.+660    	; 0x2da <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <Rand>:
  
*/
uint8_t Rand(void) {
  static uint32_t Z;
  
    if (Z & 1)  { Z = (Z >> 1); }
  48:	40 91 6c 00 	lds	r20, 0x006C
  4c:	50 91 6d 00 	lds	r21, 0x006D
  50:	60 91 6e 00 	lds	r22, 0x006E
  54:	70 91 6f 00 	lds	r23, 0x006F
  58:	db 01       	movw	r26, r22
  5a:	ca 01       	movw	r24, r20
  5c:	b6 95       	lsr	r27
  5e:	a7 95       	ror	r26
  60:	97 95       	ror	r25
  62:	87 95       	ror	r24
  64:	40 fd       	sbrc	r20, 0
  66:	07 c0       	rjmp	.+14     	; 0x76 <Rand+0x2e>
    else        { Z = (Z >> 1) ^ 0x7FFFF159; }
  68:	29 e5       	ldi	r18, 0x59	; 89
  6a:	82 27       	eor	r24, r18
  6c:	21 ef       	ldi	r18, 0xF1	; 241
  6e:	92 27       	eor	r25, r18
  70:	a0 95       	com	r26
  72:	2f e7       	ldi	r18, 0x7F	; 127
  74:	b2 27       	eor	r27, r18
  76:	80 93 6c 00 	sts	0x006C, r24
  7a:	90 93 6d 00 	sts	0x006D, r25
  7e:	a0 93 6e 00 	sts	0x006E, r26
  82:	b0 93 6f 00 	sts	0x006F, r27
  
  return (uint8_t)Z;
}
  86:	80 91 6c 00 	lds	r24, 0x006C
  8a:	08 95       	ret

0000008c <__vector_8>:

// watchdog interrupt
ISR (WDT_vect)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  sec8_counter++;
  9c:	80 91 6a 00 	lds	r24, 0x006A
  a0:	90 91 6b 00 	lds	r25, 0x006B
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	90 93 6b 00 	sts	0x006B, r25
  aa:	80 93 6a 00 	sts	0x006A, r24

#ifdef USE_HEART_BEAT_LED  
  //flash heart beat LED
  //turns B0 HIGH
  PORTB |=(1<<LED2);//  digitalWrite(LED2, HIGH);
  ae:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8b e2       	ldi	r24, 0x2B	; 43
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <__stack+0x15>
  b8:	00 c0       	rjmp	.+0      	; 0xba <__stack+0x1b>
  ba:	00 00       	nop
  _delay_ms(1);
  //turns LED2 LOW
  PORTB &= ~(1 << LED2);//  digitalWrite(LED2, LOW);
  bc:	c4 98       	cbi	0x18, 4	; 24
#endif
  
  if(sec8_counter>=HOUR_INTERVAL){
  be:	80 91 6a 00 	lds	r24, 0x006A
  c2:	90 91 6b 00 	lds	r25, 0x006B
  c6:	82 3c       	cpi	r24, 0xC2	; 194
  c8:	91 40       	sbci	r25, 0x01	; 1
  ca:	20 f1       	brcs	.+72     	; 0x114 <__stack+0x75>
    sec8_counter=0;
  cc:	10 92 6b 00 	sts	0x006B, r1
  d0:	10 92 6a 00 	sts	0x006A, r1
    if(bLedIsOn==1){
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	71 f4       	brne	.+28     	; 0xf8 <__stack+0x59>
      on_hours++;
  dc:	80 91 69 00 	lds	r24, 0x0069
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 69 00 	sts	0x0069, r24
      if(on_hours>=MAX_ON_HOURS){
  e6:	80 91 69 00 	lds	r24, 0x0069
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	98 f0       	brcs	.+38     	; 0x114 <__stack+0x75>
        bLedIsOn=0; //switch to OFF mode
  ee:	10 92 60 00 	sts	0x0060, r1
        off_hours=0;
  f2:	10 92 68 00 	sts	0x0068, r1
  f6:	0e c0       	rjmp	.+28     	; 0x114 <__stack+0x75>
      }
    }else{
      off_hours++;
  f8:	80 91 68 00 	lds	r24, 0x0068
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 68 00 	sts	0x0068, r24
      if(off_hours>=MAX_OFF_HOURS){
 102:	80 91 68 00 	lds	r24, 0x0068
 106:	84 31       	cpi	r24, 0x14	; 20
 108:	28 f0       	brcs	.+10     	; 0x114 <__stack+0x75>
        bLedIsOn=1; //switch to ON mode
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 60 00 	sts	0x0060, r24
        on_hours=0;
 110:	10 92 69 00 	sts	0x0069, r1
      }
    }
  }
  wdt_reset();
 114:	a8 95       	wdr
}  // end of WDT_vect
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <resetWatchdog>:

void resetWatchdog (void)
{
  // clear various "reset" flags
  MCUSR = 0;    
 126:	14 be       	out	0x34, r1	; 52
  // allow changes, disable reset, clear existing interrupt
  WDTCR = bit (WDCE) | bit (WDE) | bit (WDIF);
 128:	88 e9       	ldi	r24, 0x98	; 152
 12a:	81 bd       	out	0x21, r24	; 33
  // set interrupt mode and an interval (WDE must be changed from 1 to 0 here)
  ///WDTCR = bit (WDIE) | bit (WDP2) | bit (WDP1) | bit (WDP0);    // set WDIE, and 2 seconds delay
  WDTCR = bit (WDIE) | bit (WDP3) | bit (WDP0);    // set WDIE, and 8 seconds delay
 12c:	81 e6       	ldi	r24, 0x61	; 97
 12e:	81 bd       	out	0x21, r24	; 33
  // pat the dog
  wdt_reset();  
 130:	a8 95       	wdr
 132:	08 95       	ret

00000134 <goToSleep>:
 

 
void goToSleep(void)
{
  set_sleep_mode (SLEEP_MODE_PWR_DOWN);
 134:	85 b7       	in	r24, 0x35	; 53
 136:	87 7e       	andi	r24, 0xE7	; 231
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	85 bf       	out	0x35, r24	; 53
  ADCSRA = 0;            // turn off ADC
 13c:	16 b8       	out	0x06, r1	; 6
  power_all_disable ();  // power off ADC, Timer 0 and 1, serial interface
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	83 60       	ori	r24, 0x03	; 3
 142:	85 bd       	out	0x25, r24	; 37
  pinMode(0, OUTPUT);
  pinMode(1, OUTPUT);
  pinMode(2, OUTPUT);
  PORTB = 0b000000; //all low
*/
  cli(); //noInterrupts ();       // timed sequence coming up
 144:	f8 94       	cli
  resetWatchdog ();      // get watchdog ready
 146:	ef df       	rcall	.-34     	; 0x126 <resetWatchdog>
  sleep_enable ();       // ready to sleep
 148:	85 b7       	in	r24, 0x35	; 53
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	85 bf       	out	0x35, r24	; 53
  sei(); //interrupts ();         // interrupts are required now
 14e:	78 94       	sei
  sleep_cpu ();        // sleep                
 150:	88 95       	sleep
  sleep_disable ();      // precaution
 152:	85 b7       	in	r24, 0x35	; 53
 154:	8f 7d       	andi	r24, 0xDF	; 223
 156:	85 bf       	out	0x35, r24	; 53
  power_all_enable();//power_all_enable ();   // power everything back on
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	8c 7f       	andi	r24, 0xFC	; 252
 15c:	85 bd       	out	0x25, r24	; 37
 15e:	08 95       	ret

00000160 <doCandle>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	89 e3       	ldi	r24, 0x39	; 57
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <doCandle+0x2>
  _delay_us(1e6/440/16*8);
}else{
  _delay_us(1e6/440/16);   // Main clock=440*16 Hz
}
  // PWM    
  PWM_CTR++;
 166:	80 91 67 00 	lds	r24, 0x0067
 16a:	8f 5f       	subi	r24, 0xFF	; 255
  PWM_CTR&=0xf;   // only 4 bit
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	80 93 67 00 	sts	0x0067, r24
  
  if (PWM_CTR<=PWM_VAL) {
 172:	90 91 65 00 	lds	r25, 0x0065
 176:	98 17       	cp	r25, r24
 178:	10 f0       	brcs	.+4      	; 0x17e <doCandle+0x1e>
      //turns B0 HIGH
     PORTB |=(1<<LED);//digitalWrite (LED, HIGH);
 17a:	c3 9a       	sbi	0x18, 3	; 24
 17c:	01 c0       	rjmp	.+2      	; 0x180 <doCandle+0x20>
  } else {
    //turns B3 LOW
    PORTB &= ~(1 << LED);//digitalWrite (LED, LOW);
 17e:	c3 98       	cbi	0x18, 3	; 24
  }
  // FRAME
  if (PWM_CTR==0) 
 180:	80 91 67 00 	lds	r24, 0x0067
 184:	81 11       	cpse	r24, r1
 186:	2a c0       	rjmp	.+84     	; 0x1dc <doCandle+0x7c>
  {
    FRAME_CTR++;
 188:	80 91 66 00 	lds	r24, 0x0066
 18c:	8f 5f       	subi	r24, 0xFF	; 255
    FRAME_CTR&=0x1f;
 18e:	98 2f       	mov	r25, r24
 190:	9f 71       	andi	r25, 0x1F	; 31
 192:	90 93 66 00 	sts	0x0066, r25
    
    if ((FRAME_CTR&0x07)==0)  // generate a new random number every 8 cycles. In reality this is most likely bit serial
 196:	87 70       	andi	r24, 0x07	; 7
 198:	59 f4       	brne	.+22     	; 0x1b0 <doCandle+0x50>
    {
      RAND=Rand()&0x1f;
 19a:	56 df       	rcall	.-340    	; 0x48 <Rand>
 19c:	98 2f       	mov	r25, r24
 19e:	9f 71       	andi	r25, 0x1F	; 31
 1a0:	90 93 63 00 	sts	0x0063, r25
      randflag=((RAND&0x0c)!=0); //optimized, saves 14 bytes!         
 1a4:	8c 70       	andi	r24, 0x0C	; 12
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <doCandle+0x4c>
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 62 00 	sts	0x0062, r25
      else 
        randflag=0;// only update if valid         
*/    
    }
    // NEW FRAME            
    if (FRAME_CTR==0)
 1b0:	80 91 66 00 	lds	r24, 0x0066
 1b4:	81 11       	cpse	r24, r1
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <doCandle+0x66>
    {
      PWM_VAL=NEXTBRIGHT; // reload PWM
 1b8:	80 91 64 00 	lds	r24, 0x0064
 1bc:	80 93 65 00 	sts	0x0065, r24
      randflag=1;       // force update at beginning of frame
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 62 00 	sts	0x0062, r24
    }         
    
    if (randflag)
 1c6:	80 91 62 00 	lds	r24, 0x0062
 1ca:	88 23       	and	r24, r24
 1cc:	39 f0       	breq	.+14     	; 0x1dc <doCandle+0x7c>
    {
      NEXTBRIGHT=RAND>15?15:RAND;   
 1ce:	80 91 63 00 	lds	r24, 0x0063
 1d2:	80 31       	cpi	r24, 0x10	; 16
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <doCandle+0x78>
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	80 93 64 00 	sts	0x0064, r24
 1dc:	08 95       	ret

000001de <setup>:
  }
}//end doCandle

void setup (void)
{
  resetWatchdog ();  // do this first in case WDT fires
 1de:	a3 df       	rcall	.-186    	; 0x126 <resetWatchdog>

  CLKPR=_BV(CLKPCE);
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	86 bd       	out	0x26, r24	; 38
  CLKPR=0;      // Set clk division factor to 1
 1e4:	16 bc       	out	0x26, r1	; 38
  
  //Set PORTB to all outputs
  DDRB = 0xFF;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	87 bb       	out	0x17, r24	; 23
*/

  //turns B0 HIGH
  //PORTB |=(1<<0);
  //turns B3 LOW
  PORTB &= ~(1 << LED);
 1ea:	c3 98       	cbi	0x18, 3	; 24
#ifdef USE_HEART_BEAT_LED
  //turns B4 LOW
  PORTB &= ~(1 << LED2);//  digitalWrite(LED2, LOW);
 1ec:	c4 98       	cbi	0x18, 4	; 24
  //disable BOD
//  MCUCR |= _BV(BODS) | _BV(BODSE);
#ifdef USE_I2C
    I2C_Init(); //i2c.h
#else
    i2c_init(); //i2cmasher.h
 1ee:	13 c0       	rjmp	.+38     	; 0x216 <i2c_init>

000001f0 <loop>:
}  // end of setup

void loop (void)
{
  //sleep 20 hours and work 4 hours
  cli(); //noInterrupts();
 1f0:	f8 94       	cli
  if(bLedIsOn==1){
 1f2:	80 91 60 00 	lds	r24, 0x0060
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	11 f4       	brne	.+4      	; 0x1fe <loop+0xe>
    doCandle();
 1fa:	b2 df       	rcall	.-156    	; 0x160 <doCandle>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <loop+0x12>
  }else{
    //turns B3 LOW
    PORTB &= ~(1 << LED);
 1fe:	c3 98       	cbi	0x18, 3	; 24
    //digitalWrite (LED, LOW); //ensure LED is OFF
   goToSleep ();
 200:	99 df       	rcall	.-206    	; 0x134 <goToSleep>
  }
  sei(); //interrupts();
 202:	78 94       	sei
 204:	08 95       	ret

00000206 <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
 206:	00 c0       	rjmp	.+0      	; 0x208 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
 208:	00 c0       	rjmp	.+0      	; 0x20a <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
 20a:	00 c0       	rjmp	.+0      	; 0x20c <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
 20c:	00 c0       	rjmp	.+0      	; 0x20e <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
 20e:	00 c0       	rjmp	.+0      	; 0x210 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
 210:	00 c0       	rjmp	.+0      	; 0x212 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
 212:	00 00       	nop
	ret          ; 3   "
 214:	08 95       	ret

00000216 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
 216:	bc 98       	cbi	0x17, 4	; 23
	cbi SCL_DDR,SCL		;release SCL
 218:	bd 98       	cbi	0x17, 5	; 23
	cbi SDA_OUT,SDA
 21a:	c4 98       	cbi	0x18, 4	; 24
	cbi SCL_OUT,SCL
 21c:	c5 98       	cbi	0x18, 5	; 24
	ret
 21e:	08 95       	ret

00000220 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
 220:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay T/2
 222:	f1 df       	rcall	.-30     	; 0x206 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
 224:	1d d0       	rcall	.+58     	; 0x260 <i2c_write>
	ret
 226:	08 95       	ret

00000228 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
 228:	bd 9a       	sbi	0x17, 5	; 23
	rcall 	i2c_delay_T2	;delay  T/2
 22a:	ed df       	rcall	.-38     	; 0x206 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 22c:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 22e:	eb df       	rcall	.-42     	; 0x206 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 230:	bd 98       	cbi	0x17, 5	; 23
	rcall 	i2c_delay_T2	;delay  T/2
 232:	e9 df       	rcall	.-46     	; 0x206 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
 234:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay	T/2
 236:	e7 df       	rcall	.-50     	; 0x206 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
 238:	13 d0       	rcall	.+38     	; 0x260 <i2c_write>
	ret
 23a:	08 95       	ret

0000023c <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
 23c:	08 2e       	mov	r0, r24

0000023e <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
 23e:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay T/2
 240:	e2 df       	rcall	.-60     	; 0x206 <i2c_delay_T2>
	mov	r24,__tmp_reg__
 242:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
 244:	0d d0       	rcall	.+26     	; 0x260 <i2c_write>
	tst	r24		;if device not busy -> done
 246:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
 248:	11 f0       	breq	.+4      	; 0x24e <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
 24a:	02 d0       	rcall	.+4      	; 0x250 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
 24c:	f8 cf       	rjmp	.-16     	; 0x23e <i2c_start_wait1>

0000024e <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
 24e:	08 95       	ret

00000250 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
 250:	bd 9a       	sbi	0x17, 5	; 23
	sbi	SDA_DDR,SDA	;force SDA low
 252:	bc 9a       	sbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 254:	d8 df       	rcall	.-80     	; 0x206 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 256:	bd 98       	cbi	0x17, 5	; 23
	rcall	i2c_delay_T2	;delay T/2
 258:	d6 df       	rcall	.-84     	; 0x206 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 25a:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 25c:	d4 df       	rcall	.-88     	; 0x206 <i2c_delay_T2>
	ret
 25e:	08 95       	ret

00000260 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
 260:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
 262:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
 264:	01 c0       	rjmp	.+2      	; 0x268 <i2c_write_first>

00000266 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
 266:	88 0f       	add	r24, r24

00000268 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
 268:	59 f0       	breq	.+22     	; 0x280 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
 26a:	bd 9a       	sbi	0x17, 5	; 23
	brcc	i2c_write_low
 26c:	18 f4       	brcc	.+6      	; 0x274 <i2c_write_low>
	nop
 26e:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
 270:	bc 98       	cbi	0x17, 4	; 23
	rjmp	i2c_write_high
 272:	02 c0       	rjmp	.+4      	; 0x278 <i2c_write_high>

00000274 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
 274:	bc 9a       	sbi	0x17, 4	; 23
	rjmp	i2c_write_high
 276:	00 c0       	rjmp	.+0      	; 0x278 <i2c_write_high>

00000278 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
 278:	c6 df       	rcall	.-116    	; 0x206 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 27a:	bd 98       	cbi	0x17, 5	; 23
	rcall	i2c_delay_T2	;delay T/2
 27c:	c4 df       	rcall	.-120    	; 0x206 <i2c_delay_T2>
	rjmp	i2c_write_bit
 27e:	f3 cf       	rjmp	.-26     	; 0x266 <i2c_write_bit>

00000280 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
 280:	bd 9a       	sbi	0x17, 5	; 23
	cbi	SDA_DDR,SDA	;release SDA
 282:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 284:	c0 df       	rcall	.-128    	; 0x206 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 286:	bd 98       	cbi	0x17, 5	; 23

00000288 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
 288:	b5 9b       	sbis	0x16, 5	; 22
	rjmp	i2c_ack_wait
 28a:	fe cf       	rjmp	.-4      	; 0x288 <i2c_ack_wait>
	
	clr	r24		;return 0
 28c:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
 28e:	b4 99       	sbic	0x16, 4	; 22
	ldi	r24,1
 290:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
 292:	b9 df       	rcall	.-142    	; 0x206 <i2c_delay_T2>
	clr	r25
 294:	99 27       	eor	r25, r25
	ret
 296:	08 95       	ret

00000298 <i2c_readNak>:
 298:	88 27       	eor	r24, r24
 29a:	01 c0       	rjmp	.+2      	; 0x29e <i2c_read>

0000029c <i2c_readAck>:
 29c:	81 e0       	ldi	r24, 0x01	; 1

0000029e <i2c_read>:
 29e:	71 e0       	ldi	r23, 0x01	; 1

000002a0 <i2c_read_bit>:
 2a0:	bd 9a       	sbi	0x17, 5	; 23
 2a2:	bc 98       	cbi	0x17, 4	; 23
 2a4:	b0 df       	rcall	.-160    	; 0x206 <i2c_delay_T2>
 2a6:	bd 98       	cbi	0x17, 5	; 23
 2a8:	ae df       	rcall	.-164    	; 0x206 <i2c_delay_T2>

000002aa <i2c_read_stretch>:
 2aa:	b5 9b       	sbis	0x16, 5	; 22
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <i2c_read_stretch>
 2ae:	88 94       	clc
 2b0:	b4 99       	sbic	0x16, 4	; 22
 2b2:	08 94       	sec
 2b4:	77 1f       	adc	r23, r23
 2b6:	a0 f7       	brcc	.-24     	; 0x2a0 <i2c_read_bit>

000002b8 <i2c_put_ack>:
 2b8:	bd 9a       	sbi	0x17, 5	; 23
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	11 f0       	breq	.+4      	; 0x2c2 <i2c_put_ack_low>
 2be:	bc 98       	cbi	0x17, 4	; 23
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <i2c_put_ack_high>

000002c2 <i2c_put_ack_low>:
 2c2:	bc 9a       	sbi	0x17, 4	; 23

000002c4 <i2c_put_ack_high>:
 2c4:	a0 df       	rcall	.-192    	; 0x206 <i2c_delay_T2>
 2c6:	bd 98       	cbi	0x17, 5	; 23

000002c8 <i2c_put_ack_wait>:
 2c8:	b5 9b       	sbis	0x16, 5	; 22
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <i2c_put_ack_wait>
 2cc:	9c df       	rcall	.-200    	; 0x206 <i2c_delay_T2>
 2ce:	87 2f       	mov	r24, r23
 2d0:	99 27       	eor	r25, r25
 2d2:	08 95       	ret

000002d4 <main>:
}  // end of loop

int main(void){
    setup();
 2d4:	84 df       	rcall	.-248    	; 0x1de <setup>
    while(1) {
        loop();
 2d6:	8c df       	rcall	.-232    	; 0x1f0 <loop>
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <main+0x2>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
