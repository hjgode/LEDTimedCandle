   1               	# 1 "i2cmaster/i2cmaster.S"
   1               	;*************************************************************************
   0               	
   2               	; Title	:    I2C (Single) Master Implementation
   3               	; Author:    Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury
   4               	;            based on Atmel Appl. Note AVR300
   5               	; File:      $Id: i2cmaster.S,v 1.12 2008/03/02 08:51:27 peter Exp $
   6               	; Software:  AVR-GCC 3.3 or higher
   7               	; Target:    any AVR device
   8               	;
   9               	; DESCRIPTION
  10               	; 	Basic routines for communicating with I2C slave devices. This
  11               	;	"single" master implementation is limited to one bus master on the
  12               	;	I2C bus. 
  13               	;  
  14               	;       Based on the Atmel Application Note AVR300, corrected and adapted 
  15               	;       to GNU assembler and AVR-GCC C call interface
  16               	;       Replaced the incorrect quarter period delays found in AVR300 with 
  17               	;       half period delays. 
  18               	;
  19               	; USAGE
  20               	;	These routines can be called from C, refere to file i2cmaster.h.
  21               	;       See example test_i2cmaster.c 
  22               	; 	Adapt the SCL and SDA port and pin definitions and eventually 
  23               	;	the delay routine to your target !
  24               	; 	Use 4.7k pull-up resistor on the SDA and SCL pin.
  25               	;
  26               	; NOTES
  27               	;	The I2C routines can be called either from non-interrupt or
  28               	;	interrupt routines, not both.
  29               	;
  30               	;*************************************************************************
  31               	
  32               	#if (__GNUC__ * 100 + __GNUC_MINOR__) < 303
  33               	#error "This library requires AVR-GCC 3.3 or later, update to newer AVR-GCC compiler !"
  34               	#endif
  35               	
  36               	
  37               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id$ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM161__)
 126               	#  include <avr/io90pwm161.h>
 127               	#elif defined (__AVR_AT90PWM81__)
 128               	#  include <avr/io90pwm81.h>
 129               	#elif defined (__AVR_ATmega8U2__)
 130               	#  include <avr/iom8u2.h>
 131               	#elif defined (__AVR_ATmega16M1__)
 132               	#  include <avr/iom16m1.h>
 133               	#elif defined (__AVR_ATmega16U2__)
 134               	#  include <avr/iom16u2.h>
 135               	#elif defined (__AVR_ATmega16U4__)
 136               	#  include <avr/iom16u4.h>
 137               	#elif defined (__AVR_ATmega32C1__)
 138               	#  include <avr/iom32c1.h>
 139               	#elif defined (__AVR_ATmega32M1__)
 140               	#  include <avr/iom32m1.h>
 141               	#elif defined (__AVR_ATmega32U2__)
 142               	#  include <avr/iom32u2.h>
 143               	#elif defined (__AVR_ATmega32U4__)
 144               	#  include <avr/iom32u4.h>
 145               	#elif defined (__AVR_ATmega32U6__)
 146               	#  include <avr/iom32u6.h>
 147               	#elif defined (__AVR_ATmega64C1__)
 148               	#  include <avr/iom64c1.h>
 149               	#elif defined (__AVR_ATmega64M1__)
 150               	#  include <avr/iom64m1.h>
 151               	#elif defined (__AVR_ATmega128__)
 152               	#  include <avr/iom128.h>
 153               	#elif defined (__AVR_ATmega128A__)
 154               	#  include <avr/iom128a.h>
 155               	#elif defined (__AVR_ATmega1280__)
 156               	#  include <avr/iom1280.h>
 157               	#elif defined (__AVR_ATmega1281__)
 158               	#  include <avr/iom1281.h>
 159               	#elif defined (__AVR_ATmega1284__)
 160               	#  include <avr/iom1284.h>
 161               	#elif defined (__AVR_ATmega1284P__)
 162               	#  include <avr/iom1284p.h>
 163               	#elif defined (__AVR_ATmega128RFA1__)
 164               	#  include <avr/iom128rfa1.h>
 165               	#elif defined (__AVR_ATmega128RFR2__)
 166               	#  include <avr/iom128rfr2.h>
 167               	#elif defined (__AVR_ATmega1284RFR2__)
 168               	#  include <avr/iom1284rfr2.h>
 169               	#elif defined (__AVR_ATmega256RFR2__)
 170               	#  include <avr/iom256rfr2.h>
 171               	#elif defined (__AVR_ATmega2564RFR2__)
 172               	#  include <avr/iom2564rfr2.h>
 173               	#elif defined (__AVR_ATmega2560__)
 174               	#  include <avr/iom2560.h>
 175               	#elif defined (__AVR_ATmega2561__)
 176               	#  include <avr/iom2561.h>
 177               	#elif defined (__AVR_AT90CAN32__)
 178               	#  include <avr/iocan32.h>
 179               	#elif defined (__AVR_AT90CAN64__)
 180               	#  include <avr/iocan64.h>
 181               	#elif defined (__AVR_AT90CAN128__)
 182               	#  include <avr/iocan128.h>
 183               	#elif defined (__AVR_AT90USB82__)
 184               	#  include <avr/iousb82.h>
 185               	#elif defined (__AVR_AT90USB162__)
 186               	#  include <avr/iousb162.h>
 187               	#elif defined (__AVR_AT90USB646__)
 188               	#  include <avr/iousb646.h>
 189               	#elif defined (__AVR_AT90USB647__)
 190               	#  include <avr/iousb647.h>
 191               	#elif defined (__AVR_AT90USB1286__)
 192               	#  include <avr/iousb1286.h>
 193               	#elif defined (__AVR_AT90USB1287__)
 194               	#  include <avr/iousb1287.h>
 195               	#elif defined (__AVR_ATmega64RFR2__)
 196               	#  include <avr/iom64rfr2.h>
 197               	#elif defined (__AVR_ATmega644RFR2__)
 198               	#  include <avr/iom644rfr2.h>
 199               	#elif defined (__AVR_ATmega64__)
 200               	#  include <avr/iom64.h>
 201               	#elif defined (__AVR_ATmega64A__)
 202               	#  include <avr/iom64a.h>
 203               	#elif defined (__AVR_ATmega640__)
 204               	#  include <avr/iom640.h>
 205               	#elif defined (__AVR_ATmega644__) 
 206               	#  include <avr/iom644.h>
 207               	#elif (defined __AVR_ATmega644A__)
 208               	#include <avr/iom644a.h>
 209               	#elif defined (__AVR_ATmega644P__)
 210               	#  include <avr/iom644p.h>
 211               	#elif defined (__AVR_ATmega644PA__)
 212               	#  include <avr/iom644pa.h>
 213               	#elif defined (__AVR_ATmega645__)
 214               	#  include <avr/iom645.h>
 215               	#elif (defined __AVR_ATmega645A__)
 216               	#include <avr/iom645a.h>
 217               	#elif (defined __AVR_ATmega645P__)
 218               	#include <avr/iom645p.h>
 219               	#elif defined (__AVR_ATmega6450__)
 220               	#  include <avr/iom6450.h>
 221               	#elif (defined __AVR_ATmega6450A__)
 222               	#include <avr/iom6450a.h>
 223               	#elif (defined __AVR_ATmega6450P__)
 224               	#include <avr/iom6450p.h>
 225               	#elif defined (__AVR_ATmega649__)
 226               	#  include <avr/iom649.h>
 227               	#elif (defined __AVR_ATmega649A__)
 228               	#include <avr/iom649a.h>
 229               	#elif defined (__AVR_ATmega6490__)
 230               	#  include <avr/iom6490.h>
 231               	#elif (defined __AVR_ATmega6490A__)
 232               	#include <avr/iom6490a.h>
 233               	#elif (defined __AVR_ATmega6490P__)
 234               	#include <avr/iom6490p.h>
 235               	#elif defined (__AVR_ATmega649P__)
 236               	#  include <avr/iom649p.h>
 237               	#elif defined (__AVR_ATmega64HVE__)
 238               	#  include <avr/iom64hve.h>
 239               	#elif defined (__AVR_ATmega64HVE2__)
 240               	#  include <avr/iom64hve2.h>
 241               	#elif defined (__AVR_ATmega103__)
 242               	#  include <avr/iom103.h>
 243               	#elif defined (__AVR_ATmega32__)
 244               	#  include <avr/iom32.h>
 245               	#elif defined (__AVR_ATmega32A__)
 246               	#  include <avr/iom32a.h>
 247               	#elif defined (__AVR_ATmega323__)
 248               	#  include <avr/iom323.h>
 249               	#elif defined (__AVR_ATmega324P__)
 250               	#  include <avr/iom324p.h>
 251               	#elif (defined __AVR_ATmega324A__)
 252               	#include <avr/iom324a.h>
 253               	#elif defined (__AVR_ATmega324PA__)
 254               	#  include <avr/iom324pa.h>
 255               	#elif defined (__AVR_ATmega325__)
 256               	#  include <avr/iom325.h>
 257               	#elif (defined __AVR_ATmega325A__)
 258               	#include <avr/iom325a.h>
 259               	#elif defined (__AVR_ATmega325P__)
 260               	#  include <avr/iom325p.h>
 261               	#elif defined (__AVR_ATmega325PA__)
 262               	#  include <avr/iom325pa.h>  
 263               	#elif defined (__AVR_ATmega3250__) 
 264               	#  include <avr/iom3250.h>
 265               	#elif (defined __AVR_ATmega3250A__)
 266               	#include <avr/iom3250a.h>
 267               	#elif defined (__AVR_ATmega3250P__)
 268               	#  include <avr/iom3250p.h>
 269               	#elif defined (__AVR_ATmega3250PA__)
 270               	#  include <avr/iom3250pa.h>  
 271               	#elif defined (__AVR_ATmega328P__)
 272               	#  include <avr/iom328p.h>
 273               	#elif (defined __AVR_ATmega328__)
 274               	#include <avr/iom328.h>
 275               	#elif defined (__AVR_ATmega329__)
 276               	#  include <avr/iom329.h>
 277               	#elif (defined __AVR_ATmega329A__)
 278               	#include <avr/iom329a.h>
 279               	#elif defined (__AVR_ATmega329P__) 
 280               	#  include <avr/iom329p.h>
 281               	#elif (defined __AVR_ATmega329PA__)
 282               	#include <avr/iom329pa.h>
 283               	#elif (defined __AVR_ATmega3290PA__)
 284               	#include <avr/iom3290pa.h>
 285               	#elif defined (__AVR_ATmega3290__)
 286               	#  include <avr/iom3290.h>
 287               	#elif (defined __AVR_ATmega3290A__)
 288               	#include <avr/iom3290a.h>
 289               	#elif defined (__AVR_ATmega3290P__)
 290               	#  include <avr/iom3290.h>
 291               	#elif defined (__AVR_ATmega32HVB__)
 292               	#  include <avr/iom32hvb.h>
 293               	#elif defined (__AVR_ATmega32HVBrevB__)
 294               	#  include <avr/iom32hvbrevb.h>
 295               	#elif defined (__AVR_ATmega406__)
 296               	#  include <avr/iom406.h>
 297               	#elif defined (__AVR_ATmega16__)
 298               	#  include <avr/iom16.h>
 299               	#elif defined (__AVR_ATmega16A__)
 300               	#  include <avr/iom16a.h>
 301               	#elif defined (__AVR_ATmega161__)
 302               	#  include <avr/iom161.h>
 303               	#elif defined (__AVR_ATmega162__)
 304               	#  include <avr/iom162.h>
 305               	#elif defined (__AVR_ATmega163__)
 306               	#  include <avr/iom163.h>
 307               	#elif defined (__AVR_ATmega164P__)
 308               	#  include <avr/iom164p.h>
 309               	#elif (defined __AVR_ATmega164A__)
 310               	#include <avr/iom164a.h>
 311               	#elif defined (__AVR_ATmega164PA__)
 312               	#  include <avr/iom164pa.h>
 313               	#elif defined (__AVR_ATmega165__)
 314               	#  include <avr/iom165.h>
 315               	#elif (defined __AVR_ATmega165A__)
 316               	#include <avr/iom165a.h>
 317               	#elif defined (__AVR_ATmega165P__)
 318               	#  include <avr/iom165p.h>
 319               	#elif defined (__AVR_ATmega165PA__)
 320               	#  include <avr/iom165pa.h>
 321               	#elif defined (__AVR_ATmega168__)
 322               	#  include <avr/iom168.h>
 323               	#elif (defined __AVR_ATmega168A__)
 324               	#include <avr/iom168a.h>
 325               	#elif defined (__AVR_ATmega168P__)
 326               	#  include <avr/iom168p.h>
 327               	#elif defined (__AVR_ATmega168PA__)
 328               	#  include <avr/iom168pa.h>
 329               	#elif defined (__AVR_ATmega169__)
 330               	#  include <avr/iom169.h>
 331               	#elif (defined __AVR_ATmega169A__)
 332               	#include <avr/iom169a.h>
 333               	#elif defined (__AVR_ATmega169P__)
 334               	#  include <avr/iom169p.h>
 335               	#elif defined (__AVR_ATmega169PA__)
 336               	#  include <avr/iom169pa.h>
 337               	#elif defined (__AVR_ATmega8HVA__)
 338               	#  include <avr/iom8hva.h>
 339               	#elif defined (__AVR_ATmega16HVA__)
 340               	#  include <avr/iom16hva.h>
 341               	#elif defined (__AVR_ATmega16HVA2__)
 342               	#  include <avr/iom16hva2.h>
 343               	#elif defined (__AVR_ATmega16HVB__)
 344               	#  include <avr/iom16hvb.h>
 345               	#elif defined (__AVR_ATmega16HVBrevB__)
 346               	#  include <avr/iom16hvbrevb.h>
 347               	#elif defined (__AVR_ATmega8__)
 348               	#  include <avr/iom8.h>
 349               	#elif defined (__AVR_ATmega8A__)
 350               	#  include <avr/iom8a.h>
 351               	#elif (defined __AVR_ATmega48A__)
 352               	#  include <avr/iom48a.h>
 353               	#elif defined (__AVR_ATmega48__)
 354               	#  include <avr/iom48.h>
 355               	#elif defined (__AVR_ATmega48PA__)
 356               	#  include <avr/iom48pa.h>
 357               	#elif defined (__AVR_ATmega48P__)
 358               	#  include <avr/iom48p.h>
 359               	#elif defined (__AVR_ATmega88__)
 360               	#  include <avr/iom88.h>
 361               	#elif (defined __AVR_ATmega88A__)
 362               	#  include <avr/iom88a.h>
 363               	#elif defined (__AVR_ATmega88P__)
 364               	#  include <avr/iom88p.h>
 365               	#elif defined (__AVR_ATmega88PA__)
 366               	#  include <avr/iom88pa.h>
 367               	#elif defined (__AVR_ATmega8515__)
 368               	#  include <avr/iom8515.h>
 369               	#elif defined (__AVR_ATmega8535__)
 370               	#  include <avr/iom8535.h>
 371               	#elif defined (__AVR_AT90S8535__)
 372               	#  include <avr/io8535.h>
 373               	#elif defined (__AVR_AT90C8534__)
 374               	#  include <avr/io8534.h>
 375               	#elif defined (__AVR_AT90S8515__)
 376               	#  include <avr/io8515.h>
 377               	#elif defined (__AVR_AT90S4434__)
 378               	#  include <avr/io4434.h>
 379               	#elif defined (__AVR_AT90S4433__)
 380               	#  include <avr/io4433.h>
 381               	#elif defined (__AVR_AT90S4414__)
 382               	#  include <avr/io4414.h>
 383               	#elif defined (__AVR_ATtiny22__)
 384               	#  include <avr/iotn22.h>
 385               	#elif defined (__AVR_ATtiny26__)
 386               	#  include <avr/iotn26.h>
 387               	#elif defined (__AVR_AT90S2343__)
 388               	#  include <avr/io2343.h>
 389               	#elif defined (__AVR_AT90S2333__)
 390               	#  include <avr/io2333.h>
 391               	#elif defined (__AVR_AT90S2323__)
 392               	#  include <avr/io2323.h>
 393               	#elif defined (__AVR_AT90S2313__)
 394               	#  include <avr/io2313.h>
 395               	#elif defined (__AVR_ATtiny4__)
 396               	#  include <avr/iotn4.h>
 397               	#elif defined (__AVR_ATtiny5__)
 398               	#  include <avr/iotn5.h>
 399               	#elif defined (__AVR_ATtiny9__)
 400               	#  include <avr/iotn9.h>
 401               	#elif defined (__AVR_ATtiny10__)
 402               	#  include <avr/iotn10.h>
 403               	#elif defined (__AVR_ATtiny20__)
 404               	#  include <avr/iotn20.h>
 405               	#elif defined (__AVR_ATtiny40__)
 406               	#  include <avr/iotn40.h>
 407               	#elif defined (__AVR_ATtiny2313__)
 408               	#  include <avr/iotn2313.h>
 409               	#elif defined (__AVR_ATtiny2313A__)
 410               	#  include <avr/iotn2313a.h>
 411               	#elif defined (__AVR_ATtiny13__)
 412               	#  include <avr/iotn13.h>
 413               	#elif defined (__AVR_ATtiny13A__)
 414               	#  include <avr/iotn13a.h>
   1               	/* Copyright (c) 2008 Atmel Corporation
 415               	#elif defined (__AVR_ATtiny25__)
 416               	#  include <avr/iotn25.h>
 417               	#elif defined (__AVR_ATtiny4313__)
 418               	#  include <avr/iotn4313.h>
 419               	#elif defined (__AVR_ATtiny45__)
 420               	#  include <avr/iotn45.h>
 421               	#elif defined (__AVR_ATtiny85__)
 422               	#  include <avr/iotn85.h>
 423               	#elif defined (__AVR_ATtiny24__)
 424               	#  include <avr/iotn24.h>
 425               	#elif defined (__AVR_ATtiny24A__)
 426               	#  include <avr/iotn24a.h>
 427               	#elif defined (__AVR_ATtiny44__)
 428               	#  include <avr/iotn44.h>
 429               	#elif defined (__AVR_ATtiny44A__)
 430               	#  include <avr/iotn44a.h>
 431               	#elif defined (__AVR_ATtiny441__)
 432               	#  include <avr/iotn441.h>
 433               	#elif defined (__AVR_ATtiny84__)
 434               	#  include <avr/iotn84.h>
 435               	#elif defined (__AVR_ATtiny84A__)
 436               	#  include <avr/iotn84a.h>  
 437               	#elif defined (__AVR_ATtiny841__)
 438               	#  include <avr/iotn841.h>
 439               	#elif defined (__AVR_ATtiny261__)
 440               	#  include <avr/iotn261.h>
 441               	#elif defined (__AVR_ATtiny261A__)
 442               	#  include <avr/iotn261a.h>
 443               	#elif defined (__AVR_ATtiny461__)
 444               	#  include <avr/iotn461.h>
 445               	#elif defined (__AVR_ATtiny461A__)
 446               	#  include <avr/iotn461a.h>
 447               	#elif defined (__AVR_ATtiny861__)
 448               	#  include <avr/iotn861.h>
 449               	#elif defined (__AVR_ATtiny861A__)
 450               	#  include <avr/iotn861a.h>
 451               	#elif defined (__AVR_ATtiny43U__)
 452               	#  include <avr/iotn43u.h>
 453               	#elif defined (__AVR_ATtiny48__)
 454               	#  include <avr/iotn48.h>
 455               	#elif defined (__AVR_ATtiny88__)
 456               	#  include <avr/iotn88.h>
 457               	#elif defined (__AVR_ATtiny828__)
 458               	#  include <avr/iotn828.h>
 459               	#elif defined (__AVR_ATtiny87__)
 460               	#  include <avr/iotn87.h>
 461               	#elif defined (__AVR_ATtiny167__)
 462               	#  include <avr/iotn167.h>
 463               	#elif defined (__AVR_ATtiny1634__)
 464               	#  include <avr/iotn1634.h>
 465               	#elif defined (__AVR_AT90SCR100__)
 466               	#  include <avr/io90scr100.h>
 467               	#elif defined (__AVR_ATxmega16A4__)
 468               	#  include <avr/iox16a4.h>
 469               	#elif defined (__AVR_ATxmega16A4U__)
 470               	#  include <avr/iox16a4u.h>
 471               	#elif defined (__AVR_ATxmega16C4__)
 472               	#  include <avr/iox16c4.h>
 473               	#elif defined (__AVR_ATxmega16D4__)
 474               	#  include <avr/iox16d4.h>
 475               	#elif defined (__AVR_ATxmega32A4__)
 476               	#  include <avr/iox32a4.h>
 477               	#elif defined (__AVR_ATxmega32A4U__)
 478               	#  include <avr/iox32a4u.h>
 479               	#elif defined (__AVR_ATxmega32C3__)
 480               	#  include <avr/iox32c3.h>
 481               	#elif defined (__AVR_ATxmega32C4__)
 482               	#  include <avr/iox32c4.h>
 483               	#elif defined (__AVR_ATxmega32D3__)
 484               	#  include <avr/iox32d3.h>
 485               	#elif defined (__AVR_ATxmega32D4__)
 486               	#  include <avr/iox32d4.h>
 487               	#elif defined (__AVR_ATxmega8E5__)
 488               	#  include <avr/iox8e5.h>
 489               	#elif defined (__AVR_ATxmega16E5__)
 490               	#  include <avr/iox16e5.h>
 491               	#elif defined (__AVR_ATxmega32E5__)
 492               	#  include <avr/iox32e5.h>
 493               	#elif defined (__AVR_ATxmega64A1__)
 494               	#  include <avr/iox64a1.h>
 495               	#elif defined (__AVR_ATxmega64A1U__)
 496               	#  include <avr/iox64a1u.h>
 497               	#elif defined (__AVR_ATxmega64A3__)
 498               	#  include <avr/iox64a3.h>
 499               	#elif defined (__AVR_ATxmega64A3U__)
 500               	#  include <avr/iox64a3u.h>
 501               	#elif defined (__AVR_ATxmega64A4U__)
 502               	#  include <avr/iox64a4u.h>
 503               	#elif defined (__AVR_ATxmega64B1__)
 504               	#  include <avr/iox64b1.h>
 505               	#elif defined (__AVR_ATxmega64B3__)
 506               	#  include <avr/iox64b3.h>
 507               	#elif defined (__AVR_ATxmega64C3__)
 508               	#  include <avr/iox64c3.h>
 509               	#elif defined (__AVR_ATxmega64D3__)
 510               	#  include <avr/iox64d3.h>
 511               	#elif defined (__AVR_ATxmega64D4__)
 512               	#  include <avr/iox64d4.h>
 513               	#elif defined (__AVR_ATxmega128A1__)
 514               	#  include <avr/iox128a1.h>
 515               	#elif defined (__AVR_ATxmega128A1U__)
 516               	#  include <avr/iox128a1u.h>
 517               	#elif defined (__AVR_ATxmega128A4U__)
 518               	#  include <avr/iox128a4u.h>
 519               	#elif defined (__AVR_ATxmega128A3__)
 520               	#  include <avr/iox128a3.h>
 521               	#elif defined (__AVR_ATxmega128A3U__)
 522               	#  include <avr/iox128a3u.h>
 523               	#elif defined (__AVR_ATxmega128B1__)
 524               	#  include <avr/iox128b1.h>
 525               	#elif defined (__AVR_ATxmega128B3__)
 526               	#  include <avr/iox128b3.h>
 527               	#elif defined (__AVR_ATxmega128C3__)
 528               	#  include <avr/iox128c3.h>
 529               	#elif defined (__AVR_ATxmega128D3__)
 530               	#  include <avr/iox128d3.h>
 531               	#elif defined (__AVR_ATxmega128D4__)
 532               	#  include <avr/iox128d4.h>
 533               	#elif defined (__AVR_ATxmega192A3__)
 534               	#  include <avr/iox192a3.h>
 535               	#elif defined (__AVR_ATxmega192A3U__)
 536               	#  include <avr/iox192a3u.h>
 537               	#elif defined (__AVR_ATxmega192C3__)
 538               	#  include <avr/iox192c3.h>
 539               	#elif defined (__AVR_ATxmega192D3__)
 540               	#  include <avr/iox192d3.h>
 541               	#elif defined (__AVR_ATxmega256A3__)
 542               	#  include <avr/iox256a3.h>
 543               	#elif defined (__AVR_ATxmega256A3U__)
 544               	#  include <avr/iox256a3u.h>
 545               	#elif defined (__AVR_ATxmega256A3B__)
 546               	#  include <avr/iox256a3b.h>
 547               	#elif defined (__AVR_ATxmega256A3BU__)
 548               	#  include <avr/iox256a3bu.h>
 549               	#elif defined (__AVR_ATxmega256C3__)
 550               	#  include <avr/iox256c3.h>
 551               	#elif defined (__AVR_ATxmega256D3__)
 552               	#  include <avr/iox256d3.h>
 553               	#elif defined (__AVR_ATxmega384C3__)
 554               	#  include <avr/iox384c3.h>
 555               	#elif defined (__AVR_ATxmega384D3__)
 556               	#  include <avr/iox384d3.h>
 557               	#elif defined (__AVR_ATA5790__)
 558               	#  include <avr/ioa5790.h>
 559               	#elif defined (__AVR_ATA5790N__)
 560               	#  include <avr/ioa5790n.h>
 561               	#elif defined (__AVR_ATA5272__)
 562               	#  include <avr/ioa5272.h>
 563               	#elif defined (__AVR_ATA5505__)
 564               	#  include <avr/ioa5505.h>
 565               	#elif defined (__AVR_ATA5795__)
 566               	#  include <avr/ioa5795.h>
 567               	#elif defined (__AVR_ATA5702M322__)
 568               	#  include <avr/ioa5702m322.h>
 569               	#elif defined (__AVR_ATA5782__)
 570               	#  include <avr/ioa5782.h>
 571               	#elif defined (__AVR_ATA5831__)
 572               	#  include <avr/ioa5831.h>
 573               	#elif defined (__AVR_ATA6285__)
 574               	#  include <avr/ioa6285.h>
 575               	#elif defined (__AVR_ATA6286__)
 576               	#  include <avr/ioa6286.h>
 577               	#elif defined (__AVR_ATA6289__)
 578               	#  include <avr/ioa6289.h>
 579               	#elif defined (__AVR_ATA6612C__)
 580               	#  include <avr/ioa6612c.h>
 581               	#elif defined (__AVR_ATA6613C__)
 582               	#  include <avr/ioa6613c.h>
 583               	#elif defined (__AVR_ATA6614Q__)
 584               	#  include <avr/ioa6614q.h>
 585               	#elif defined (__AVR_ATA6616C__)
 586               	#  include <avr/ioa6616c.h>
 587               	#elif defined (__AVR_ATA6617C__)
 588               	#  include <avr/ioa6617c.h>
 589               	#elif defined (__AVR_ATA664251__)
 590               	#  include <avr/ioa664251.h>
 591               	/* avr1: the following only supported for assembler programs */
 592               	#elif defined (__AVR_ATtiny28__)
 593               	#  include <avr/iotn28.h>
 594               	#elif defined (__AVR_AT90S1200__)
 595               	#  include <avr/io1200.h>
 596               	#elif defined (__AVR_ATtiny15__)
 597               	#  include <avr/iotn15.h>
 598               	#elif defined (__AVR_ATtiny12__)
 599               	#  include <avr/iotn12.h>
 600               	#elif defined (__AVR_ATtiny11__)
 601               	#  include <avr/iotn11.h>
 602               	#elif defined (__AVR_M3000__)
 603               	#  include <avr/iom3000.h>
 604               	#else
 605               	#  if !defined(__COMPILING_AVR_LIBC__)
 606               	#    warning "device type not defined"
 607               	#  endif
 608               	#endif
 609               	
 610               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 611               	
 612               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 613               	
 614               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 615               	
 616               	#if __AVR_ARCH__ >= 100
 617               	#  include <avr/xmega.h>
 618               	#endif
 619               	
 620               	/* Include fuse.h after individual IO header files. */
 621               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 622               	
 623               	/* Include lock.h after individual IO header files. */
 624               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 625               	
  38               	
  39               	
  40               	
  41               	;***** Adapt these SCA and SCL port and pin definition to your target !!
  42               	;
  43               	#define SDA     	4		// SDA Port D, Pin 4   
  44               	#define SCL		5		// SCL Port D, Pin 5
  45               	#define SDA_PORT        PORTB           // SDA Port B
  46               	#define SCL_PORT        PORTB           // SCL Port B         
  47               	
  48               	;******
  49               	
  50               	;-- map the IO register back into the IO address space
  51               	#define SDA_DDR		(_SFR_IO_ADDR(SDA_PORT) - 1)
  52               	#define SCL_DDR		(_SFR_IO_ADDR(SCL_PORT) - 1)
  53               	#define SDA_OUT		_SFR_IO_ADDR(SDA_PORT)
  54               	#define SCL_OUT		_SFR_IO_ADDR(SCL_PORT)
  55               	#define SDA_IN		(_SFR_IO_ADDR(SDA_PORT) - 2)
  56               	#define SCL_IN		(_SFR_IO_ADDR(SCL_PORT) - 2)
  57               	
  58               	
  59               	#ifndef __tmp_reg__
  60               	#define __tmp_reg__ 0
  61               	#endif
  62               	
  63               	
  64               		.section .text
  65               	
  66               	;*************************************************************************
  67               	; delay half period
  68               	; For I2C in normal mode (100kHz), use T/2 > 5us
  69               	; For I2C in fast mode (400kHz),   use T/2 > 1.3us
  70               	;*************************************************************************
  73               		.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
  74               	i2c_delay_T2:        ; 4 cycles
  75:i2cmaster/i2cmaster.S **** 	rjmp 1f      ; 2   "
  76:i2cmaster/i2cmaster.S **** 1:	rjmp 2f      ; 2   "
  77:i2cmaster/i2cmaster.S **** 2:	rjmp 3f      ; 2   "
  78:i2cmaster/i2cmaster.S **** 3:	rjmp 4f      ; 2   "
  79:i2cmaster/i2cmaster.S **** 4:	rjmp 5f      ; 2   "
  80:i2cmaster/i2cmaster.S **** 5: 	rjmp 6f      ; 2   "
  81:i2cmaster/i2cmaster.S **** 6:	nop          ; 1   "
  82:i2cmaster/i2cmaster.S **** 	ret          ; 3   "
  83               		.endfunc     ; total 20 cyles = 5.0 microsec with 4 Mhz crystal 
  84               	
  85               	
  86               	;*************************************************************************
  87               	; Initialization of the I2C bus interface. Need to be called only once
  88               	; 
  89               	; extern void i2c_init(void)
  90               	;*************************************************************************
  91               		.global i2c_init
  92               		.func i2c_init
  93               	i2c_init:
  94:i2cmaster/i2cmaster.S **** 	cbi SDA_DDR,SDA		;release SDA
  95:i2cmaster/i2cmaster.S **** 	cbi SCL_DDR,SCL		;release SCL
  96:i2cmaster/i2cmaster.S **** 	cbi SDA_OUT,SDA
  97:i2cmaster/i2cmaster.S **** 	cbi SCL_OUT,SCL
  98:i2cmaster/i2cmaster.S **** 	ret
  99               		.endfunc
 100               	
 101               	
 102               	;*************************************************************************	
 103               	; Issues a start condition and sends address and transfer direction.
 104               	; return 0 = device accessible, 1= failed to access device
 105               	;
 106               	; extern unsigned char i2c_start(unsigned char addr);
 107               	;	addr = r24, return = r25(=0):r24
 108               	;*************************************************************************
 109               	
 110               		.global i2c_start
 111               		.func   i2c_start
 112               	i2c_start:
 113:i2cmaster/i2cmaster.S **** 	sbi 	SDA_DDR,SDA	;force SDA low
 114:i2cmaster/i2cmaster.S **** 	rcall 	i2c_delay_T2	;delay T/2
 115               		
 116:i2cmaster/i2cmaster.S **** 	rcall 	i2c_write	;write address
 117:i2cmaster/i2cmaster.S **** 	ret
 118               		.endfunc		
 119               	
 120               	
 121               	;*************************************************************************
 122               	; Issues a repeated start condition and sends address and transfer direction.
 123               	; return 0 = device accessible, 1= failed to access device
 124               	;
 125               	; extern unsigned char i2c_rep_start(unsigned char addr);
 126               	;	addr = r24,  return = r25(=0):r24
 127               	;*************************************************************************
 128               	
 129               		.global i2c_rep_start
 130               		.func	i2c_rep_start
 131               	i2c_rep_start:
 132:i2cmaster/i2cmaster.S **** 	sbi	SCL_DDR,SCL	;force SCL low
 133:i2cmaster/i2cmaster.S **** 	rcall 	i2c_delay_T2	;delay  T/2
 134:i2cmaster/i2cmaster.S **** 	cbi	SDA_DDR,SDA	;release SDA
 135:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 136:i2cmaster/i2cmaster.S **** 	cbi	SCL_DDR,SCL	;release SCL
 137:i2cmaster/i2cmaster.S **** 	rcall 	i2c_delay_T2	;delay  T/2
 138:i2cmaster/i2cmaster.S **** 	sbi 	SDA_DDR,SDA	;force SDA low
 139:i2cmaster/i2cmaster.S **** 	rcall 	i2c_delay_T2	;delay	T/2
 140               		
 141:i2cmaster/i2cmaster.S **** 	rcall	i2c_write	;write address
 142:i2cmaster/i2cmaster.S **** 	ret
 143               		.endfunc
 144               	
 145               	
 146               	;*************************************************************************	
 147               	; Issues a start condition and sends address and transfer direction.
 148               	; If device is busy, use ack polling to wait until device is ready
 149               	;
 150               	; extern void i2c_start_wait(unsigned char addr);
 151               	;	addr = r24
 152               	;*************************************************************************
 153               	
 154               		.global i2c_start_wait
 155               		.func   i2c_start_wait
 156               	i2c_start_wait:
 157:i2cmaster/i2cmaster.S **** 	mov	__tmp_reg__,r24
 158               	i2c_start_wait1:
 159:i2cmaster/i2cmaster.S **** 	sbi 	SDA_DDR,SDA	;force SDA low
 160:i2cmaster/i2cmaster.S **** 	rcall 	i2c_delay_T2	;delay T/2
 161:i2cmaster/i2cmaster.S **** 	mov	r24,__tmp_reg__
 162:i2cmaster/i2cmaster.S **** 	rcall 	i2c_write	;write address
 163:i2cmaster/i2cmaster.S **** 	tst	r24		;if device not busy -> done
 164:i2cmaster/i2cmaster.S **** 	breq	i2c_start_wait_done
 165:i2cmaster/i2cmaster.S **** 	rcall	i2c_stop	;terminate write operation
 166:i2cmaster/i2cmaster.S **** 	rjmp	i2c_start_wait1	;device busy, poll ack again
 167               	i2c_start_wait_done:
 168:i2cmaster/i2cmaster.S **** 	ret
 169               		.endfunc	
 170               	
 171               	
 172               	;*************************************************************************
 173               	; Terminates the data transfer and releases the I2C bus
 174               	;
 175               	; extern void i2c_stop(void)
 176               	;*************************************************************************
 177               	
 178               		.global	i2c_stop
 179               		.func	i2c_stop
 180               	i2c_stop:
 181:i2cmaster/i2cmaster.S **** 	sbi	SCL_DDR,SCL	;force SCL low
 182:i2cmaster/i2cmaster.S **** 	sbi	SDA_DDR,SDA	;force SDA low
 183:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 184:i2cmaster/i2cmaster.S **** 	cbi	SCL_DDR,SCL	;release SCL
 185:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 186:i2cmaster/i2cmaster.S **** 	cbi	SDA_DDR,SDA	;release SDA
 187:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 188:i2cmaster/i2cmaster.S **** 	ret
 189               		.endfunc
 190               	
 191               	
 192               	;*************************************************************************
 193               	; Send one byte to I2C device
 194               	; return 0 = write successful, 1 = write failed
 195               	;
 196               	; extern unsigned char i2c_write( unsigned char data );
 197               	;	data = r24,  return = r25(=0):r24
 198               	;*************************************************************************
 199               		.global i2c_write
 200               		.func	i2c_write
 201               	i2c_write:
 202:i2cmaster/i2cmaster.S **** 	sec			;set carry flag
 203:i2cmaster/i2cmaster.S **** 	rol 	r24		;shift in carry and out bit one
 204:i2cmaster/i2cmaster.S **** 	rjmp	i2c_write_first
 205               	i2c_write_bit:
 206:i2cmaster/i2cmaster.S **** 	lsl	r24		;if transmit register empty
 207               	i2c_write_first:
 208:i2cmaster/i2cmaster.S **** 	breq	i2c_get_ack
 209:i2cmaster/i2cmaster.S **** 	sbi	SCL_DDR,SCL	;force SCL low
 210:i2cmaster/i2cmaster.S **** 	brcc	i2c_write_low
 211:i2cmaster/i2cmaster.S **** 	nop
 212:i2cmaster/i2cmaster.S **** 	cbi	SDA_DDR,SDA	;release SDA
 213:i2cmaster/i2cmaster.S **** 	rjmp	i2c_write_high
 214               	i2c_write_low:
 215:i2cmaster/i2cmaster.S **** 	sbi	SDA_DDR,SDA	;force SDA low
 216:i2cmaster/i2cmaster.S **** 	rjmp	i2c_write_high
 217               	i2c_write_high:
 218:i2cmaster/i2cmaster.S **** 	rcall 	i2c_delay_T2	;delay T/2
 219:i2cmaster/i2cmaster.S **** 	cbi	SCL_DDR,SCL	;release SCL
 220:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 221:i2cmaster/i2cmaster.S **** 	rjmp	i2c_write_bit
 222               		
 223               	i2c_get_ack:
 224:i2cmaster/i2cmaster.S **** 	sbi	SCL_DDR,SCL	;force SCL low
 225:i2cmaster/i2cmaster.S **** 	cbi	SDA_DDR,SDA	;release SDA
 226:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 227:i2cmaster/i2cmaster.S **** 	cbi	SCL_DDR,SCL	;release SCL
 228               	i2c_ack_wait:
 229:i2cmaster/i2cmaster.S **** 	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
 230:i2cmaster/i2cmaster.S **** 	rjmp	i2c_ack_wait
 231               		
 232:i2cmaster/i2cmaster.S **** 	clr	r24		;return 0
 233:i2cmaster/i2cmaster.S **** 	sbic	SDA_IN,SDA	;if SDA high -> return 1
 234:i2cmaster/i2cmaster.S **** 	ldi	r24,1
 235:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 236:i2cmaster/i2cmaster.S **** 	clr	r25
 237:i2cmaster/i2cmaster.S **** 	ret
 238               		.endfunc
 239               	
 240               	
 241               	
 242               	;*************************************************************************
 243               	; read one byte from the I2C device, send ack or nak to device
 244               	; (ack=1, send ack, request more data from device 
 245               	;  ack=0, send nak, read is followed by a stop condition)
 246               	;
 247               	; extern unsigned char i2c_read(unsigned char ack);
 248               	;	ack = r24, return = r25(=0):r24
 249               	; extern unsigned char i2c_readAck(void);
 250               	; extern unsigned char i2c_readNak(void);
 251               	; 	return = r25(=0):r24
 252               	;*************************************************************************
 253               		.global i2c_readAck
 254               		.global i2c_readNak
 255               		.global i2c_read		
 256               		.func	i2c_read
 257               	i2c_readNak:
 258:i2cmaster/i2cmaster.S **** 	clr	r24
 259:i2cmaster/i2cmaster.S **** 	rjmp	i2c_read
 260               	i2c_readAck:
 261:i2cmaster/i2cmaster.S **** 	ldi	r24,0x01
 262               	i2c_read:
 263:i2cmaster/i2cmaster.S **** 	ldi	r23,0x01	;data = 0x01
 264               	i2c_read_bit:
 265:i2cmaster/i2cmaster.S **** 	sbi	SCL_DDR,SCL	;force SCL low
 266:i2cmaster/i2cmaster.S **** 	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
 267:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 268               		
 269:i2cmaster/i2cmaster.S **** 	cbi	SCL_DDR,SCL	;release SCL
 270:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 271               		
 272               	i2c_read_stretch:
 273:i2cmaster/i2cmaster.S ****     sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
 274:i2cmaster/i2cmaster.S ****     rjmp	i2c_read_stretch
 275               	    	
 276:i2cmaster/i2cmaster.S **** 	clc			;clear carry flag
 277:i2cmaster/i2cmaster.S **** 	sbic	SDA_IN,SDA	;if SDA is high
 278:i2cmaster/i2cmaster.S **** 	sec			;  set carry flag
 279               		
 280:i2cmaster/i2cmaster.S **** 	rol	r23		;store bit
 281:i2cmaster/i2cmaster.S **** 	brcc	i2c_read_bit	;while receive register not full
 282               		
 283               	i2c_put_ack:
 284:i2cmaster/i2cmaster.S **** 	sbi	SCL_DDR,SCL	;force SCL low	
 285:i2cmaster/i2cmaster.S **** 	cpi	r24,1
 286:i2cmaster/i2cmaster.S **** 	breq	i2c_put_ack_low	;if (ack=0)
 287:i2cmaster/i2cmaster.S **** 	cbi	SDA_DDR,SDA	;      release SDA
 288:i2cmaster/i2cmaster.S **** 	rjmp	i2c_put_ack_high
 289               	i2c_put_ack_low:                ;else
 290:i2cmaster/i2cmaster.S **** 	sbi	SDA_DDR,SDA	;      force SDA low
 291               	i2c_put_ack_high:
 292:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 293:i2cmaster/i2cmaster.S **** 	cbi	SCL_DDR,SCL	;release SCL
 294               	i2c_put_ack_wait:
 295:i2cmaster/i2cmaster.S **** 	sbis	SCL_IN,SCL	;wait SCL high
 296:i2cmaster/i2cmaster.S **** 	rjmp	i2c_put_ack_wait
 297:i2cmaster/i2cmaster.S **** 	rcall	i2c_delay_T2	;delay T/2
 298:i2cmaster/i2cmaster.S **** 	mov	r24,r23
 299:i2cmaster/i2cmaster.S **** 	clr	r25
 300:i2cmaster/i2cmaster.S **** 	ret
 301               		.endfunc
DEFINED SYMBOLS
i2cmaster/i2cmaster.S:74     .text:00000000 i2c_delay_T2
i2cmaster/i2cmaster.S:93     .text:00000010 i2c_init
i2cmaster/i2cmaster.S:112    .text:0000001a i2c_start
i2cmaster/i2cmaster.S:201    .text:0000005a i2c_write
i2cmaster/i2cmaster.S:131    .text:00000022 i2c_rep_start
i2cmaster/i2cmaster.S:156    .text:00000036 i2c_start_wait
i2cmaster/i2cmaster.S:158    .text:00000038 i2c_start_wait1
i2cmaster/i2cmaster.S:167    .text:00000048 i2c_start_wait_done
i2cmaster/i2cmaster.S:180    .text:0000004a i2c_stop
i2cmaster/i2cmaster.S:207    .text:00000062 i2c_write_first
i2cmaster/i2cmaster.S:205    .text:00000060 i2c_write_bit
i2cmaster/i2cmaster.S:223    .text:0000007a i2c_get_ack
i2cmaster/i2cmaster.S:214    .text:0000006e i2c_write_low
i2cmaster/i2cmaster.S:217    .text:00000072 i2c_write_high
i2cmaster/i2cmaster.S:228    .text:00000082 i2c_ack_wait
i2cmaster/i2cmaster.S:260    .text:00000096 i2c_readAck
i2cmaster/i2cmaster.S:257    .text:00000092 i2c_readNak
i2cmaster/i2cmaster.S:262    .text:00000098 i2c_read
i2cmaster/i2cmaster.S:264    .text:0000009a i2c_read_bit
i2cmaster/i2cmaster.S:272    .text:000000a4 i2c_read_stretch
i2cmaster/i2cmaster.S:283    .text:000000b2 i2c_put_ack
i2cmaster/i2cmaster.S:289    .text:000000bc i2c_put_ack_low
i2cmaster/i2cmaster.S:291    .text:000000be i2c_put_ack_high
i2cmaster/i2cmaster.S:294    .text:000000c2 i2c_put_ack_wait

NO UNDEFINED SYMBOLS
